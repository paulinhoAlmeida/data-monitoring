## Development infrastructure for running and testing the Debezium UI
version: '3'
services:
  dbzui-zookeeper:
    container_name: dbzui-zookeeper
    image: debezium/zookeeper:${DEBEZIUM_VERSION}
    networks:
      - dbzui-network
  dbzui-kafka:
    container_name: dbzui-kafka
    image: debezium/kafka:${DEBEZIUM_VERSION}
    hostname: dbzui-kafka 
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - dbzui-zookeeper
    environment:
      - ZOOKEEPER_CONNECT=dbzui-zookeeper:2181
      - KAFKA_LISTENERS=INTERNAL://:29092,EXTERNAL://:9092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://dbzui-kafka:29092,EXTERNAL://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
    networks:
      - dbzui-network
    links:
      - dbzui-elastic
  dbzui-db-pg:
    container_name: dbzui-db-pg
    image: debezium/example-postgres:${DEBEZIUM_VERSION}
    ports:
      - "65432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - dbzui-network
  dbzui-db-pg-2:
    container_name: dbzui-db-pg-2
    image: debezium/postgres:${POSTGRES_VERSION}
    ports:
      - 5432:5432
      - 9779:9779
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=inventory
    networks:
      - dbzui-network
  dbzui-db-mysql:
    container_name: dbzui-db-mysql
    image: debezium/example-mysql:${DEBEZIUM_VERSION}
    ports:
      - "63306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=debezium
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysql
    networks:
      - dbzui-network
  dbzui-db-mysql-2:
    container_name: dbzui-db-mysql-2
    image: debezium/example-mysql:${DEBEZIUM_VERSION}
    ports:
      - "53306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=debezium
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysql
    networks:
      - dbzui-network
  dbzui-db-mysql-3:
    container_name: dbzui-db-mysql-3
    image: debezium/example-mysql:${DEBEZIUM_VERSION}
    ports:
      - "43306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=debezium
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysql
    networks:
      - dbzui-network
  dbzui-db-mongo:
    container_name: dbzui-db-mongo
    image: mongo:3.6
    command: ["mongod", "--replSet", "rs0", "--auth"]
    ports:
      - "37017:27017"
    volumes:
    - ./backend/src/test/resources/initialize-mongo-single.js:/docker-entrypoint-initdb.d/initialize-mongo-single.js
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=admin
    networks:
      - dbzui-network
  mongo-initializer:
    image: mongo:3.6
    networks:
      - dbzui-network
    depends_on:
      - dbzui-db-mongo
    command: bash -c 'sleep 20 && mongo -u admin -p admin --authenticationDatabase admin dbzui-db-mongo:27017/inventory --eval "rs.initiate();"'
  dbzui-backend:
    container_name: dbzui-backend
    build:
      context: .
    ports:
      - "8080:8080"
    environment:
      KAFKA_CONNECT_URI: http://dbzui-connect-sink:8083
    depends_on:
      - dbzui-connect-sink
    networks:
      - dbzui-network
  dbzui-kafdrop:
    container_name: dbzui-kafdrop
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "dbzui-kafka:29092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - dbzui-kafka
    networks:
      - dbzui-network
  dbzui-elastic:
    container_name: dbzui-elastic
    image: docker.elastic.co/elasticsearch/elasticsearch:${KAFKA_ELASTICSEARCH_VERSION}
    ports:
     - "9200:9200"
     - "9300:9300"
    environment:
     - http.host=0.0.0.0
     - transport.host=127.0.0.1
     - xpack.security.enabled=false
    networks:
      - dbzui-network
  dbzui-connect-sink:
    container_name: dbzui-connect-sink
    image: debezium/connect-jdbc-es:${DEBEZIUM_VERSION}
    build: ./debezium-jdbc-es
    ports:
      - 8083:8083
      - 5005:5005
      - 8778:8778
    links:
      - dbzui-kafka
      - dbzui-db-mysql
      - dbzui-db-pg
      - dbzui-db-pg-2
      - dbzui-elastic
    environment:
      - BOOTSTRAP_SERVERS=dbzui-kafka:29092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_source_connect_statuses
    networks:
      - dbzui-network
  dbzui-kibana:
    container_name: dbzui-kibana
    image: docker.elastic.co/kibana/kibana:${KIBANA_VERSION}
    ports:
      - 5601:5601
    environment:
      SERVER_NAME: dbzui-kibana
      ELASTICSEARCH_HOSTS: http://dbzui-elastic:9200
    networks:
      - dbzui-network
    volumes:
      - kibana-volume:/home/node/app
  python:
    image: bitnami/python:latest
    command: "sh -c 'pip install -r requirements.txt && python script.py'"
    volumes:
      - .:/app

networks:
  dbzui-network:
    external: false

volumes:
  kibana-volume:

